proxy_cache_path /etc/nginx/cache keys_zone=one:10m;

log_format compression '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" "$gzip_ratio"';

upstream backend {
    server cv-app:8081;
    keepalive 32;
    }

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name gaile.asuscomm.com;
    root /usr/share/nginx/html;
    index index.html index.html;

    rewrite ^ https://$server_name$uri last;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    ssl_certificate /etc/nginx/certs/cert.pem;
    ssl_certificate_key /etc/nginx/certs/key.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    root /usr/share/nginx/html;
    index index.html index.html;

    access_log /var/log/nginx/access.log compression;
    error_log /var/log/nginx/error.log;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    ## All static files will be served directly.
    location ~* \.(?:manifest|appcache|html?|xml|json)$ {
     expires -1;
     # access_log logs/static.log; # I don't usually include a static log
    }

    # Feed
    location ~* \.(?:rss|atom)$ {
      expires 1y;
      add_header Cache-Control "public";
    }

    # Media: images, icons, video, audio, HTC
    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
      expires 1y;
      add_header Cache-Control "public";
    }

    # CSS and Javascript
    location ~* \.(?:css|js|woff2)$ {
      expires 1y;
      add_header Cache-Control "public";
    }

    gzip on;
    gzip_vary on;
    gzip_min_length 80;
    gzip_buffers 16 8k;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;
    gzip_comp_level 6;
    gunzip on;

    location ~ /api/v1/ {
      proxy_pass                          http://backend;
      proxy_set_header  Host              $http_host;   # required for docker client's sake
      proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
      proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header  X-Forwarded-Proto $scheme;
      proxy_read_timeout                  900;
      }

    location ~ /api/auth/ {
      proxy_pass                          http://backend;
      proxy_set_header  Host              $http_host;   # required for docker client's sake
      proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
      proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header  X-Forwarded-Proto $scheme;
      proxy_read_timeout                  900;

      }

     location / {
        try_files $uri $uri/ /index.html;
      }
}



